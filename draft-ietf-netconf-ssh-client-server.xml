<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->
<rfc category="std" docName="draft-ietf-netconf-ssh-client-server-latest"
     ipr="trust200902">
  <front>
    <title abbrev="Groupings for SSH Clients and Servers">YANG Groupings for
      SSH Clients and SSH Servers</title>
    <author fullname="Kent Watsen" initials="K." surname="Watsen">
      <organization>Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>
    <author fullname="Gary Wu" initials="G." surname="Wu">
      <organization>Cisco Systems</organization>
      <address>
        <email>garywu@cisco.com</email>
      </address>
    </author>
    <date/>
    <area>Operations</area>
    <workgroup>NETCONF Working Group</workgroup>
    <abstract>
      <t>This document defines three YANG modules: the first defines groupings
        for a generic SSH client, the second defines groupings for a generic SSH
        server, and the third defines common identities and groupings used by
        both the client and the server. It is intended that these groupings will
        be used by applications using the SSH protocol.</t>
    </abstract>
    <note title="Editorial Note (To be removed by RFC Editor)">
      <t>This draft contains placeholder values that need to be replaced
        with finalized values at the time of publication. This note summarizes
        all of the substitutions that are needed. No other RFC Editor
        instructions are specified elsewhere in this document.</t>
      <t>Artwork in this document contains shorthand references to drafts in
        progress.  Please apply the following replacements:
        <list style="symbols">
          <t><spanx style="verb">AAAA</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-crypto-types</t>
          <t><spanx style="verb">BBBB</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-trust-anchors</t>
          <t><spanx style="verb">CCCC</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-keystore</t>
          <t><spanx style="verb">DDDD</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-tcp-client-server</t>
          <t><spanx style="verb">EEEE</spanx> --&gt; the assigned RFC value for this draft</t>
        </list>
      </t>
      <t>Artwork in this document contains placeholder values for the date of
        publication of this draft. Please apply the following replacement:
        <list style="symbols">
          <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
        </list>
      </t>
      <t>The following Appendix section is to be removed prior to publication:
        <list style="symbols">
          <t>Appendix A. Change Log</t>
        </list>
      </t>
    </note>
INSERT_TEXT_FROM_FILE(../client-server-overview-snippet.xml,158)
  </front>

  <middle>
    <section title="Introduction">
      <t>This document defines three YANG 1.1 <xref target="RFC7950"/>
      modules: the first defines a grouping for a generic SSH client, the
      second defines a grouping for a generic SSH server, and the third
      defines identities and groupings common to both the client and the
      server. It is intended that these groupings will be used by applications
      using the SSH protocol <xref target="RFC4252"/>, <xref
      target="RFC4253"/>, and <xref target="RFC4254"/>. For instance, these
      groupings could be used to help define the data model for an OpenSSH
      <xref target="OPENSSH"/> server or a NETCONF over SSH <xref
      target="RFC6242"/> based server.</t>

      <t>The client and server YANG modules in this document each define one
      grouping, which is focused on just SSH-specific configuration, and
      specifically avoids any transport-level configuration, such as what
      ports to listen on or connect to. This affords applications the
      opportunity to define their own strategy for how the underlying TCP
      connection is established. For instance, applications supporting NETCONF
      Call Home <xref target="RFC8071"/> could use the "ssh-server-grouping"
      grouping for the SSH parts it provides, while adding data nodes for the
      TCP-level call-home configuration.</t>

      <t>The modules defined in this document use groupings defined in <xref
      target="I-D.ietf-netconf-keystore"/> <!-- and
        <xref target="I-D.kwatsen-netconf-trust-anchors"/> --> enabling keys
      <!-- and trust anchors, respectively,--> to be either locally defined or
      a reference to globally configured values.</t>

      <t>The modules defined in this document optionally support <xref
      target="RFC6187"/> enabling X.509v3 certificate based host keys and
      public keys.</t>
    </section>

    <section title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in BCP 14
      <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
      they appear in all capitals, as shown here.</t>
    </section>

    <section anchor="ssh-client-model" title="The SSH Client Model">
      <section title="Tree Diagram">
        <t>This section provides a tree diagram <xref target="RFC8340"/> for
        the "ietf-ssh-client" module that does not have groupings
        expanded.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-ssh-client-tree-no-expand.txt)
]]></artwork>
          </figure></t>
      </section>

      <section title="Example Usage">
        <t>This section presents two examples showing the "ssh-client-grouping"
        grouping populated with some data. These examples are effectively the same
        except the first configures the client identity using a local key
        while the second uses a key configured in a keystore. Both examples
        are consistent with the examples presented in Section 2 of <xref
        target="I-D.ietf-netconf-trust-anchors"/> and Section 3.2 of <xref
        target="I-D.ietf-netconf-keystore"/>.</t>

        <t>The following example configures the client identity using a local
        key: <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-client-local.xml)
]]></artwork>
          </figure></t>

        <t>The following example configures the client identity using a key
        from the keystore: <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-client-keystore.xml)
]]></artwork>
          </figure></t>
      </section>

      <section anchor="ssh-client-yang-module" title="YANG Module">
        <t>This YANG module has normative references to <xref
        target="I-D.ietf-netconf-trust-anchors"/>, and <xref
        target="I-D.ietf-netconf-keystore"/>.</t>

        <t>
          <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-ssh-client@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-ssh-client@YYYY-MM-DD.yang)
]]></artwork>
            <postamble>&lt;CODE ENDS&gt;</postamble>
          </figure>
        </t>
      </section>
    </section>

    <section anchor="ssh-server-model" title="The SSH Server Model">
      <section title="Tree Diagram">
        <t>This section provides a tree diagram <xref target="RFC8340"/> for
        the "ietf-ssh-server" module that does not have groupings
        expanded.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-ssh-server-tree-no-expand.txt)
]]></artwork>
          </figure></t>
      </section>

      <section title="Example Usage">
        <t>This section presents two examples showing the "ssh-server-grouping"
        grouping populated with some data. These examples are effectively the same
        except the first configures the server identity using a local key
        while the second uses a key configured in a keystore. Both examples
        are consistent with the examples presented in Section 2 of <xref
        target="I-D.ietf-netconf-trust-anchors"/> and Section 3.2 of <xref
        target="I-D.ietf-netconf-keystore"/>.</t>

        <t>The following example configures the server identity using a local
        key: <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-server-local.xml)
]]></artwork>
          </figure></t>

        <t>The following example configures the server identity using a key
        from the keystore: <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-server-keystore.xml)
]]></artwork>
          </figure></t>
      </section>

      <section anchor="ssh-server-yang-module" title="YANG Module">
        <t>This YANG module has normative references to <xref
        target="I-D.ietf-netconf-trust-anchors"/> and <xref
        target="I-D.ietf-netconf-keystore"/> and informative references to
        <xref target="RFC4253"/> and <xref target="RFC7317"/>.</t>

        <t>
          <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-ssh-server@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-ssh-server@YYYY-MM-DD.yang)
]]></artwork>
            <postamble>&lt;CODE ENDS&gt;</postamble>
          </figure>
        </t>
      </section>
    </section>

    <section anchor="ssh-common-model" title="The SSH Common Model">
      <t>The SSH common model presented in this section contains identities
      and groupings common to both SSH clients and SSH servers. The
      "transport-params-grouping" grouping can be used to configure the list of SSH
      transport algorithms permitted by the SSH client or SSH server. The
      lists of algorithms are ordered such that, if multiple algorithms are
      permitted by the client, the algorithm that appears first in its list
      that is also permitted by the server is used for the SSH transport layer
      connection. The ability to restrict the algorithms allowed is
      provided in this grouping for SSH clients and SSH servers that are
      capable of doing so and may serve to make SSH clients and SSH servers
      compliant with security policies.</t>

      <t>Features are defined for algorithms that are OPTIONAL or are not
      widely supported by popular implementations. Note that the list of
      algorithms is not exhaustive. As well, some algorithms that are REQUIRED
      by <xref target="RFC4253"/> are missing, notably "ssh-dss" and
      "diffie-hellman-group1-sha1" due to their weak security and there being
      alternatives that are widely supported.</t>

      <section title="Tree Diagram">
        <t>The following tree diagram <xref target="RFC8340"/> provides an
        overview of the data model for the "ietf-ssh-common" module.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-ssh-common-tree.txt)
]]></artwork>
          </figure></t>
      </section>

      <section title="Example Usage">
        <t>This following example illustrates how the
        "transport-params-grouping' grouping appears when populated with some data.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-common.xml)
]]></artwork>
          </figure></t>
      </section>

      <section anchor="ssh-common-yang-module" title="YANG Module">
        <t>This YANG module has normative references to <xref
        target="RFC4253"/>, <xref target="RFC4344"/>, <xref
        target="RFC4419"/>, <xref target="RFC5656"/>, <xref
        target="RFC6187"/>, and <xref target="RFC6668"/>.</t>

        <t>
          <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-ssh-common@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-ssh-common@YYYY-MM-DD.yang)
]]></artwork>
            <postamble>&lt;CODE ENDS&gt;</postamble>
          </figure>
        </t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>The YANG modules defined in this document are designed to be accessed
      via YANG based management protocols, such as NETCONF <xref
      target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>. Both of these
      protocols have mandatory-to-implement secure transport layers (e.g.,
      SSH, TLS) with mutual authentication.</t>

      <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
      provides the means to restrict access for particular users to a
      pre-configured subset of all available protocol operations and
      content.</t>

      <t>Since the modules in this document only define groupings,
      these considerations are primarily for the designers of other modules
      that use these groupings.</t>

      <t>There are a number of data nodes defined in the YANG modules that are
      writable/creatable/deletable (i.e., config true, which is the default).
      These data nodes may be considered sensitive or vulnerable in some
      network environments. Write operations (e.g., edit-config) to these data
      nodes without proper protection can have a negative effect on network
      operations. These are the subtrees and data nodes and their
      sensitivity/vulnerability:
        <list hangIndent="6" style="hanging">
          <t hangText="   *:">All of the nodes defined by the grouping
            statement in both the "ietf-ssh-client" and "ietf-ssh-server"
            modules are sensitive to write operations. For instance, the
            addition or removal of references to keys, certificates,
            trusted anchors, etc., or even the modification of transport
            or keepalive parameters can dramatically alter the implemented
            security policy.  For this reason, all the nodes are protected
            the NACM extension "default-deny-write".</t>
        </list>
      </t>

      <t>Some of the readable data nodes in the YANG modules may be considered
      sensitive or vulnerable in some network environments. It is thus
      important to control read access (e.g., via get, get-config, or
      notification) to these data nodes. These are the subtrees and data nodes
      and their sensitivity/vulnerability:
        <list hangIndent="6" style="hanging">
          <t hangText="   ssh-client-grouping/client-identity/:">This
          subtree in the "ietf-ssh-client" module contains nodes that are
          additionally sensitive to read operations such that, in normal use
          cases, they should never be returned to a client.  Specifically,
          the descendent nodes 'password', 'public-key/local-definition/private-key'
          and 'certificate/local-definition/private-key'.  For this reason,
          all of these node are protected by the NACM extension
          "default-deny-all".</t>
          <t hangText="   ssh-server-grouping/server-identity/:">This
          subtree in the "ietf-ssh-server" module contains nodes that are
          additionally sensitive to read operations such that, in normal use
          cases, they should never be returned to a client.  Specifically,
          the descendent nodes 'host-key/public-key/local-definition/private-key' and
          'host-key/certificate/local-definition/private-key'.  For this
          reason, both of these node are protected by the NACM extension
          "default-deny-all".</t>
        </list>
      </t>

      <t>Some of the operations in this YANG module may be considered
        sensitive or vulnerable in some network environments. It is
        thus important to control access to these operations. These
        are the operations and their sensitivity/vulnerability:
        <list style="hanging" hangIndent="6">
          <t hangText="   *:">The groupings defined in this document
            include "action" statements that come from groupings defined
            in <xref target="I-D.ietf-netconf-crypto-types"/>.  Please
            consult that document for the security considerations of
            the "action" statements defined by the "grouping"
            statements defined in this document.</t>
        </list>
      </t>
    </section>

    <section title="IANA Considerations">
      <section title="The IETF XML Registry">
        <t>This document registers three URIs in the "ns" subregistry of the
        IETF XML Registry <xref target="RFC3688"/>. Following the format in
        <xref target="RFC3688"/>, the following registrations are
        requested:</t>

        <t><figure>
            <artwork>
   URI: urn:ietf:params:xml:ns:yang:ietf-ssh-client
   Registrant Contact: The NETCONF WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.

   URI: urn:ietf:params:xml:ns:yang:ietf-ssh-server
   Registrant Contact: The NETCONF WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.

   URI: urn:ietf:params:xml:ns:yang:ietf-ssh-common
   Registrant Contact: The NETCONF WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.
</artwork>
          </figure></t>
      </section>

      <section title="The YANG Module Names Registry">
        <t>This document registers three YANG modules in the YANG Module Names
        registry <xref target="RFC6020"/>. Following the format in <xref
        target="RFC6020"/>, the following registrations are requested:</t>

        <t><figure>
            <artwork>
   name:         ietf-ssh-client
   namespace:    urn:ietf:params:xml:ns:yang:ietf-ssh-client
   prefix:       sshc
   reference:    RFC EEEE

   name:         ietf-ssh-server
   namespace:    urn:ietf:params:xml:ns:yang:ietf-ssh-server
   prefix:       sshs
   reference:    RFC EEEE

   name:         ietf-ssh-common
   namespace:    urn:ietf:params:xml:ns:yang:ietf-ssh-common
   prefix:       sshcmn
   reference:    RFC EEEE
</artwork>
          </figure></t>
      </section>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119.xml"?>
      <?rfc include="reference.RFC.4344.xml"?>
      <?rfc include="reference.RFC.4419.xml"?>
      <?rfc include="reference.RFC.5656.xml"?>
      <?rfc include="reference.RFC.6020.xml"?>
      <?rfc include="reference.RFC.6187.xml"?>
      <?rfc include="reference.RFC.6668.xml"?>
      <?rfc include="reference.RFC.7950.xml"?>
      <?rfc include="reference.RFC.8174.xml"?>
      <?rfc include="reference.RFC.8341.xml"?>
      <?rfc include="reference.I-D.ietf-netconf-trust-anchors"?>
      <?rfc include="reference.I-D.ietf-netconf-keystore"?>
      <?rfc include="reference.I-D.ietf-netconf-crypto-types"?>
    </references>

    <references title="Informative References">
      <!--<reference anchor='FIPS180-4' target="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">
          <front>
            <title>Secure Hash Standard (SHS)</title>
            <author fullname='National Institute of Standards and Technology'/>
            <date year='2012' month='March'/>
          </front>
          <seriesInfo name="FIPS PUB" value="180-4"/>
        </reference>-->
      <?rfc include="reference.RFC.3688.xml"?>
      <?rfc include="reference.RFC.4252.xml"?>
      <?rfc include="reference.RFC.4253.xml"?>
      <?rfc include="reference.RFC.4254.xml"?>
      <?rfc include="reference.RFC.6241.xml"?>
      <?rfc include="reference.RFC.6242.xml"?>
      <?rfc include="reference.RFC.7317.xml"?>
      <?rfc include="reference.RFC.8040.xml"?>
      <?rfc include="reference.RFC.8071.xml"?>
      <?rfc include="reference.RFC.8340.xml"?>
      <reference anchor="OPENSSH" target="http://www.openssh.com">
        <front>
          <title>OpenSSH</title>
          <author fullname="The OpenBSD Project"/>
          <date year="2016"/>
        </front>
      </reference>
    </references>

    <section title="Change Log">
      <section title="00 to 01">
        <t>
          <list style="symbols">
            <t>Noted that '0.0.0.0' and '::' might have special meanings.</t>
            <t>Renamed "keychain" to "keystore".</t>
          </list>
        </t>
      </section>
      <section title="01 to 02">
        <t>
          <list style="symbols">
            <t>Removed the groupings 'listening-ssh-client-grouping' and
            'listening-ssh-server-grouping'. Now modules only contain the
            transport-independent groupings.</t>
            <t>Simplified the "client-auth" part in the ietf-ssh-client
            module. It now inlines what it used to point to keystore for.</t>
            <t>Added cipher suites for various algorithms into new
            'ietf-ssh-common' module.</t>
          </list>
        </t>
      </section>
      <section title="02 to 03">
        <t>
          <list style="symbols">
            <t>Removed 'RESTRICTED' enum from 'password' leaf type.</t>
            <t>Added a 'must' statement to container 'server-auth' asserting
            that at least one of the various auth mechanisms must be
            specified.</t>
            <t>Fixed description statement for leaf 'trusted-ca-certs'.</t>
          </list>
        </t>
      </section>
      <section title="03 to 04">
        <t>
          <list style="symbols">
            <t>Change title to "YANG Groupings for SSH Clients and SSH
            Servers"</t>
            <t>Added reference to RFC 6668</t>
            <t>Added RFC 8174 to Requirements Language Section.</t>
            <t>Enhanced description statement for ietf-ssh-server's
            "trusted-ca-certs" leaf.</t>
            <t>Added mandatory true to ietf-ssh-client's "client-auth"
            'choice' statement.</t>
            <t>Changed the YANG prefix for module ietf-ssh-common from
            'sshcom' to 'sshcmn'.</t>
            <t>Removed the compression algorithms as they are not commonly
            configurable in vendors' implementations.</t>
            <t>Updating descriptions in transport-params-grouping and the
            servers's usage of it.</t>
            <t>Now tree diagrams reference ietf-netmod-yang-tree-diagrams</t>
            <t>Updated YANG to use typedefs around leafrefs to common keystore
            paths</t>
            <t>Now inlines key and certificates (no longer a leafref to
            keystore)</t>
          </list>
        </t>
      </section>
      <section title="04 to 05">
        <t>
          <list style="symbols">
            <t>Merged changes from co-author.</t>
          </list>
        </t>
      </section>
      <section title="05 to 06">
        <t>
          <list style="symbols">
            <t>Updated to use trust anchors from trust-anchors draft (was
            keystore draft)</t>
            <t>Now uses new keystore grouping enabling asymmetric key to be
            either locally defined or a reference to the keystore.</t>
          </list>
        </t>
      </section>
      <section title="06 to 07">
        <t>
          <list style="symbols">
            <t>factored the ssh-[client|server]-groupings into more reusable
            groupings.</t>
            <t>added if-feature statements for the new "ssh-host-keys" and
            "x509-certificates" features defined in
            draft-ietf-netconf-trust-anchors.</t>
          </list>
        </t>
      </section>
      <section title="07 to 08">
        <t>
          <list style="symbols">
            <t>Added a number of compatibility matrices to Section 5 (thanks Frank!)</t>
            <t>Clarified that any configured "host-key-alg" values need to be 
               compatible with the configured private key.</t>
          </list>
        </t>
      </section>
      <section title="08 to 09">
        <t>
          <list style="symbols">
            <t>Updated examples to reflect update to groupings defined in the keystore -09 draft.</t>
            <t>Add SSH keepalives features and groupings.</t>
            <t>Prefixed top-level SSH grouping nodes with 'ssh-' and support mashups.</t>
            <t>Updated copyright date, boilerplate template, affiliation, and folding algorithm.</t>
          </list>
        </t>
      </section>
      <section title="09 to 10">
        <t>
          <list style="symbols">
            <t>Reformatted the YANG modules.</t>
          </list>
        </t>
      </section>
      <section title="10 to 11">
        <t>
          <list style="symbols">
            <t>Reformatted lines causing folding to occur.</t>
          </list>
        </t>
      </section>
      <section title="11 to 12">
        <t>
          <list style="symbols">
            <t>Collapsed all the inner groupings into the top-level grouping.</t>
            <t>Added a top-level "demux container" inside the top-level grouping.</t>
            <t>Added NACM statements and updated the Security Considerations section.</t>
            <t>Added "presence" statements on the "keepalive" containers, as was
              needed to address a validation error that appeared after adding the
              "must" statements into the NETCONF/RESTCONF client/server modules.</t>
            <t>Updated the boilerplate text in module-level "description" statement
              to match copyeditor convention.</t>
          </list>
        </t>
      </section>
      <section title="12 to 13">
        <t>
          <list style="symbols">
            <t>Removed the "demux containers", floating the
              nacm:default-deny-write to each descendent node, and
              adding a note to model designers regarding the potential
              need to add their own demux containers.</t>
            <t>Fixed a couple references (section 2 --> section 3)</t>
            <t>In the server model, replaced &lt;client-cert-auth&gt;
              with &lt;client-authentication&gt; and introduced 
              'local-or-external' choice.</t>
          </list>
        </t>
      </section>
      <section title="13 to 14">
        <t>
          <list style="symbols">
            <t>Updated to reflect changes in trust-anchors drafts
              (e.g., s/trust-anchors/truststore/g + s/pinned.//)</t>
          </list>
        </t>
      </section>
      <section title="14 to 15">
        <t>
          <list style="symbols">
            <t>Updated examples to reflect ietf-crypto-types change
              (e.g., identities --&gt; enumerations)</t>
            <t>Updated "server-authentication" and "client-authentication" nodes from
              being a leaf of type "ts:host-keys-ref" or "ts:certificates-ref" to a
              container that uses "ts:local-or-truststore-host-keys-grouping" or 
              "ts:local-or-truststore-certs-grouping".</t>
          </list>
        </t>
      </section>
      <section title="15 to 16">
        <t>
          <list style="symbols">
            <t>Removed unnecessary if-feature statements in the -client and -server modules.</t>
            <t>Cleaned up some description statements in the -client and -server modules.</t>
            <t>Fixed a canonical ordering issue in ietf-ssh-common detected by new pyang.</t>
          </list>
        </t>
      </section>
      <section title="16 to 17">
        <t>
          <list style="symbols">
            <t>Removed choice local-or-external by removing the 'external' case and flattening
              the 'local' case and adding a "client-auth-config-supported" feature.</t>
            <t>Updated examples to include the "*-key-format" nodes.</t>
            <t>Augmented-in "must" expressions ensuring that locally-defined public-key-format
              are "ct:ssh-public-key-format" (must expr for ref'ed keys are TBD).</t>
          </list>
        </t>
      </section>
      <section title="17 to 18">
        <t>
          <list style="symbols">
            <t>Removed leaf-list 'other' from ietf-ssh-server.</t>
            <t>Removed unused 'external-client-auth-supported' feature.</t>
            <t>Added features client-auth-password, client-auth-hostbased, and client-auth-none.</t>
            <t>Renamed 'host-key' to 'public-key' for when refering to 'publickey' based auth.</t>
            <t>Added new feature-protected 'hostbased' and 'none' to the 'user' node's config.</t>
            <t>Added new feature-protected 'hostbased' and 'none' to the 'client-identity' node's config.</t>
            <t>Updated examples to reflect new "bag" addition to truststore.</t>
            <t>Refined truststore/keystore groupings to ensure the key formats "must" be particular values.</t>
            <t>Switched to using truststore's new "public-key" bag (instead of separate "ssh-public-key"
              and "raw-public-key" bags.</t>
            <t>Updated client/server examples to cover ALL cases (local/ref x cert/raw-key/psk).</t>
          </list>
        </t>
      </section>
      <section title="18 to 19">
        <t>
          <list style="symbols">
            <t>Updated the "keepalives" containers to address Michal Vasko's request to
              align with RFC 8071.</t>
            <t>Removed algorithm-mapping tables from the "SSH Common Model" section</t>
            <t>Removed 'algorithm' node from examples.</t>
            <t>Added feature "client-identity-publickey"</t>
            <t>Removed "choice auth-type", as auth-types aren't exclusive.</t>
            <t>Renamed both "client-certs" and "server-certs" to "ee-certs"</t>
            <t>Switch "must" to assert the public-key-format is "subject-public-key-info-format" when certificates are used.</t>
            <t>Added a "Note to Reviewers" note to first page.</t>
          </list>
        </t>
      </section>
      <section title="19 to 20">
        <t>
          <list style="symbols">
            <t>Added a "must 'public-key or password or hostbased or none or certificate'"
              statement to the "user" node in ietf-ssh-client</t>
          </list>
        </t>
      </section>
    </section>

    <section numbered="no" title="Acknowledgements">
      <t>The authors would like to thank for following for lively discussions
        on list and in the halls (ordered by last name):
        Andy Bierman,
        Martin Bjorklund,
        Benoit Claise,
        Mehmet Ersue,
        Balázs Kovács,
        Radek Krejci,
        David Lamparter,
        Ladislav Lhotka,
        Alan Luchuk,
        Tom Petch,
        Juergen Schoenwaelder,
        Phil Shafer,
        Sean Turner,
        Michal Vaško,
        Bert Wijnen,
        and Liang Xia.</t>
    </section>
  </back>
</rfc>
