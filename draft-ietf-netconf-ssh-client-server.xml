<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
     category="std"
     consensus="true"
     docName="draft-ietf-netconf-ssh-client-server-latest"
     ipr="trust200902">
  <front>
    <title abbrev="Groupings for SSH Clients and Servers">YANG Groupings for
      SSH Clients and SSH Servers</title>
    <author fullname="Kent Watsen" initials="K." surname="Watsen">
      <organization>Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>
    <date/>
    <area>Operations</area>
    <workgroup>NETCONF Working Group</workgroup>
    <abstract>
      <t>This document defines three YANG 1.1
        modules: the first defines features and groupings common to both SSH
        clients and SSH servers, the second defines a grouping for a generic
        SSH client, and the third defines a grouping for a generic SSH server.</t>
    </abstract>
    <note title="Editorial Note (To be removed by RFC Editor)">
      <t>This draft contains placeholder values that need to be replaced
        with finalized values at the time of publication. This note summarizes
        all of the substitutions that are needed. No other RFC Editor
        instructions are specified elsewhere in this document.</t>
      <t>Artwork in this document contains shorthand references to drafts in
        progress.  Please apply the following replacements:
        <list style="symbols">
          <t><spanx style="verb">AAAA</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-crypto-types</t>
          <t><spanx style="verb">BBBB</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-trust-anchors</t>
          <t><spanx style="verb">CCCC</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-keystore</t>
          <t><spanx style="verb">DDDD</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-tcp-client-server</t>
          <t><spanx style="verb">EEEE</spanx> --&gt; the assigned RFC value for this draft</t>
        </list>
      </t>
      <t>Artwork in this document contains placeholder values for the date of
        publication of this draft. Please apply the following replacement:
        <list style="symbols">
          <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
        </list>
      </t>
      <t>The following Appendix section is to be removed prior to publication:
        <list style="symbols">
          <t><xref target="change-log"/>.  Change Log</t>
        </list>
      </t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>This document defines three YANG 1.1 <xref target="RFC7950"/>
        modules: the first defines features and groupings common to both SSH
        clients and SSH servers, the second defines a grouping for a generic
        SSH client, and the third defines a grouping for a generic SSH server.
        It is intended that these groupings will be used by applications
        using the SSH protocol <xref target="RFC4252"/>, <xref
        target="RFC4253"/>, and <xref target="RFC4254"/>. For instance, these
        groupings could be used to help define the data model for an OpenSSH
        <xref target="OPENSSH"/> server or a NETCONF over SSH <xref
        target="RFC6242"/> based server.</t>

      <t>The client and server YANG modules in this document each define one
      grouping, which is focused on just SSH-specific configuration, and
      specifically avoids any transport-level configuration, such as what
      ports to listen on or connect to. This affords applications the
      opportunity to define their own strategy for how the underlying TCP
      connection is established. For instance, applications supporting NETCONF
      Call Home <xref target="RFC8071"/> could use the "ssh-server-grouping"
      grouping for the SSH parts it provides, while adding data nodes for the
      TCP-level call-home configuration.</t>

      <t>The modules defined in this document use groupings defined in <xref
      target="I-D.ietf-netconf-keystore"/> <!-- and
        <xref target="I-D.kwatsen-netconf-trust-anchors"/> --> enabling keys
      <!-- and trust anchors, respectively,--> to be either locally defined or
      a reference to globally configured values.</t>

      <t>The modules defined in this document optionally support <xref
      target="RFC6187"/> enabling X.509v3 certificate based host keys and
      public keys.</t>

INSERT_TEXT_FROM_FILE(../common-intro-snippet.xml,150)

      <section title="Adherence to the NMDA">
        <t>This document is compliant with the Network Management Datastore
          Architecture (NMDA) <xref target="RFC8342"/>.  For instance, as
          described in <xref target="I-D.ietf-netconf-trust-anchors"/> and
          <xref target="I-D.ietf-netconf-keystore"/>, trust anchors and keys
          installed during manufacturing are expected to appear
          in &lt;operational&gt;.</t>
      </section>

        <section title="Conventions">
          <t>Various examples used in this document use a placeholder
            value for binary data that has been base64 encoded (e.g.,
            "BASE64VALUE=").  This placeholder value is used as real
            base64 encoded structures are often many lines long and
            hence distracting to the example being presented.</t>
        </section>
    </section>

    <section anchor="ssh-common-model" title='The "ietf-ssh-common" Module'>
      <t>The SSH common model presented in this section contains features
      and groupings common to both SSH clients and SSH servers. The
      "transport-params-grouping" grouping can be used to configure
      the list of SSH transport algorithms permitted by the SSH client
      or SSH server. The lists of permitted algorithms are in decreasing
      order of usage preference.  The algorithm that appears first in
      the client list that also appears in the server list is the one
      that is used for the SSH transport layer connection.  The ability
      to restrict the algorithms allowed is provided in this grouping
      for SSH clients and SSH servers that are capable of doing so
      and may serve to make SSH clients and SSH servers compliant
      with security policies.</t>

      <section title="Data Model Overview">

        <t>This section provides an overview of the "ietf-ssh-common" module
          in terms of its features, identities, and groupings.</t>

        <section title="Features" anchor="common-features" toc="exclude">
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-ssh-common" module:</t>
          <t>
            <figure>
              <artwork><![CDATA[
Features:
  +-- ssh-x509-certs
  +-- transport-params
]]></artwork>
            </figure>
          </t>
          <aside>
            <t>The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340"/>.</t>
          </aside>
        </section>

        <section title="Groupings" toc="exclude">
          <t>The "ietf-ssh-common" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>transport-params-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>

          <section title='The "transport-params-grouping" Grouping' anchor="transport-params-grouping">
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "transport-params-grouping" grouping:</t>
            <t>
              <figure>
               <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-transport-params-grouping.no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>This grouping is used by both the "ssh-client-grouping" and the
                "ssh-server-grouping" groupings defined in <xref target="ssh-client-grouping"/>
                and <xref target="ssh-server-grouping"/>, respectively.</li>
              <li>This grouping enables client and server configurations to
                specify the algorithms that are to be used when establishing
                SSH sessions.</li>
              <li>Each list is "ordered-by user".</li>
            </ul>
          </section>
        </section>

        <section title="Protocol-accessible Nodes" toc="exclude">
          <t>The "ietf-ssh-common" module defines only "grouping" statements that are
            used by other modules to instantiate protocol-accessible nodes.</t>
        </section>

      </section>

      <section title="Example Usage">
        <t>This following example illustrates how the
        "transport-params-grouping' grouping appears when populated with some data.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-common.xml)
]]></artwork>
          </figure></t>
      </section>

      <section anchor="ssh-common-yang-module" title="YANG Module">
        <t>This YANG module has normative references to <xref
        target="RFC4253"/>, <xref target="RFC4344"/>, <xref
        target="RFC4419"/>, <xref target="RFC5656"/>, <xref
        target="RFC6187"/>, and <xref target="RFC6668"/>.</t>


        <t>
          <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-ssh-common@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-ssh-common@YYYY-MM-DD.yang)
]]></artwork>
            <postamble>&lt;CODE ENDS&gt;</postamble>
          </figure>
        </t>
      </section>
    </section>

    <section anchor="ssh-client-model" title='The "ietf-ssh-client" Module'>

      <t>This section defines a YANG 1.1 <xref target="RFC7950"/> module called
        "ietf-ssh-client".  A high-level overview of the module is provided in
        <xref target="client-overview"/>. Examples illustrating the module's use
        are provided in <xref target="client-examples">Examples</xref>. The YANG
        module itself is defined in <xref target="client-yang-module"/>.</t>

      <section title="Data Model Overview" anchor="client-overview">

        <t>This section provides an overview of the "ietf-ssh-client" module
          in terms of its features and groupings.</t>

        <section title="Features" anchor="client-features" toc="exclude">
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-ssh-client" module:</t>
          <t>
            <figure>
              <artwork><![CDATA[
Features:
  +-- ssh-client-keepalives
  +-- client-ident-password
  +-- client-ident-publickey
  +-- client-ident-hostbased
  +-- client-ident-none
]]></artwork>
            </figure>
          </t>
          <aside>
            <t>The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340"/>.</t>
          </aside>
        </section>

        <section title="Groupings" toc="exclude">
          <t>The "ietf-ssh-client" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>ssh-client-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>

          <section title='The "ssh-client-grouping" Grouping' anchor="ssh-client-grouping">
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "ssh-client-grouping" grouping:</t>
            <t>
              <figure>
               <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-ssh-client-grouping.no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>The "client-identity" node configures a "username" and authentication methods,
                each enabled by a "feature" statement defined in <xref target="client-features"/>.</li>
              <li>The "server-authentication" node configures trust anchors for
                authenticating the SSH server, with each option enabled by a "feature" statement.</li>
              <li>The "transport-params" node, which must be enabled by a feature, configures
                parameters for the SSH sessions established by this configuration.</li>
              <li>The "keepalives" node, which must be enabled by a feature, configures
                a "presence" container for testing the aliveness of the SSH server.  The
                aliveness-test occurs at the SSH protocol layer.</li>
              <li>For the referenced grouping statement(s):
                <ul spacing="compact">
                  <li>The "local-or-keystore-asymmetric-key-grouping" grouping is
                    discussed in <relref section="2.1.3.4" target="I-D.ietf-netconf-keystore"/>.</li>
                  <li>The "local-or-keystore-end-entity-cert-with-key-grouping" grouping is
                    discussed in <relref section="2.1.3.6" target="I-D.ietf-netconf-keystore"/>.</li>
                  <li>The "local-or-truststore-public-keys-grouping" grouping is
                    discussed in <relref section="2.1.3.2" target="I-D.ietf-netconf-trust-anchors"/>.</li>
                  <li>The "local-or-truststore-certs-grouping" grouping is
                    discussed in <relref section="2.1.3.1" target="I-D.ietf-netconf-trust-anchors"/>.</li>
                  <li>The "transport-params-grouping" grouping is discussed in
                  <xref target="transport-params-grouping"/> in this document.</li>
                </ul>
              </li>
            </ul>
          </section>
        </section>

        <section title="Protocol-accessible Nodes" toc="exclude">
          <t>The "ietf-ssh-client" module defines only "grouping" statements that are
            used by other modules to instantiate protocol-accessible nodes.</t>
        </section>

      </section>

      <section title="Example Usage" anchor="client-examples">
        <t>This section presents two examples showing the "ssh-client-grouping"
        grouping populated with some data. These examples are effectively the same
        except the first configures the client identity using a local key
        while the second uses a key configured in a keystore. Both examples
        are consistent with the examples presented in Section 2 of <xref
        target="I-D.ietf-netconf-trust-anchors"/> and Section 3.2 of <xref
        target="I-D.ietf-netconf-keystore"/>.</t>

        <t>The following configuration example uses local-definitions for the
          client identity and server authentication:
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-client-local.xml)
]]></artwork>
          </figure>
        </t>

        <t>The following configuration example uses keystore-references for the
          client identity and truststore-references for server authentication:
          from the keystore:
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-client-keystore.xml)
]]></artwork>
          </figure>
        </t>
      </section>

      <section anchor="client-yang-module" title="YANG Module">
        <t>This YANG module has normative references to <xref
        target="I-D.ietf-netconf-trust-anchors"/>, and <xref
        target="I-D.ietf-netconf-keystore"/>.</t>

        <t>
          <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-ssh-client@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-ssh-client@YYYY-MM-DD.yang)
]]></artwork>
            <postamble>&lt;CODE ENDS&gt;</postamble>
          </figure>
        </t>
      </section>
    </section>

    <section anchor="ssh-server-model" title='The "ietf-ssh-server" Module'>

      <t>This section defines a YANG 1.1 module called
        "ietf-ssh-server".  A high-level overview of the module is provided in
        <xref target="server-overview"/>. Examples illustrating the module's use
        are provided in <xref target="server-examples">Examples</xref>. The YANG
        module itself is defined in <xref target="server-yang-module"/>.</t>

      <section title="Data Model Overview" anchor="server-overview">

        <t>This section provides an overview of the "ietf-ssh-server" module
          in terms of its features and groupings.</t>

        <section title="Features" anchor="server-features" toc="exclude">
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-ssh-server" module:</t>
          <t>
            <figure>
              <artwork><![CDATA[
Features:
  +-- ssh-server-keepalives
  +-- local-users-supported
  +-- local-user-auth-publickey {local-users-supported}?
  +-- local-user-auth-password {local-users-supported}?
  +-- local-user-auth-hostbased {local-users-supported}?
  +-- local-user-auth-none {local-users-supported}?
]]></artwork>
            </figure>
          </t>
          <aside>
            <t>The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340"/>.</t>
          </aside>
        </section>

        <section title="Groupings" toc="exclude">
          <t>The "ietf-ssh-server" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>ssh-server-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>

          <section title='The "ssh-server-grouping" Grouping' anchor="ssh-server-grouping">
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "ssh-server-grouping" grouping:</t>
            <t>
              <figure>
               <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-ssh-server-grouping.no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>The "server-identity" node configures the authentication methods the
                server can use to identify itself to clients.  The ability to use a
                certificate is enabled by a "feature".</li>
              <li>The "client-authentication" node configures trust anchors for
                authenticating the SSH client, with each option enabled by a "feature" statement.</li>
              <li>The "transport-params" node, which must be enabled by a feature, configures
                parameters for the SSH sessions established by this configuration.</li>
              <li>The "keepalives" node, which must be enabled by a feature, configures
                a "presence" container for testing the aliveness of the SSH client.  The
                aliveness-test occurs at the SSH protocol layer.</li>
              <li>For the referenced grouping statement(s):
                <ul spacing="compact">
                  <li>The "local-or-keystore-asymmetric-key-grouping" grouping is
                    discussed in <relref section="2.1.3.4" target="I-D.ietf-netconf-keystore"/>.</li>
                  <li>The "local-or-keystore-end-entity-cert-with-key-grouping" grouping is
                    discussed in <relref section="2.1.3.6" target="I-D.ietf-netconf-keystore"/>.</li>
                  <li>The "local-or-truststore-public-keys-grouping" grouping is
                    discussed in <relref section="2.1.3.2" target="I-D.ietf-netconf-trust-anchors"/>.</li>
                  <li>The "local-or-truststore-certs-grouping" grouping is
                    discussed in <relref section="2.1.3.1" target="I-D.ietf-netconf-trust-anchors"/>.</li>
                  <li>The "transport-params-grouping" grouping is discussed in
                  <xref target="transport-params-grouping"/> in this document.</li>
                </ul>
              </li>
            </ul>
          </section>
        </section>

        <section title="Protocol-accessible Nodes" toc="exclude">
          <t>The "ietf-ssh-server" module defines only "grouping" statements that are
            used by other modules to instantiate protocol-accessible nodes.</t>
        </section>

      </section>

      <section title="Example Usage" anchor="server-examples">
        <t>This section presents two examples showing the "ssh-server-grouping"
        grouping populated with some data. These examples are effectively the same
        except the first configures the server identity using a local key
        while the second uses a key configured in a keystore. Both examples
        are consistent with the examples presented in Section 2 of <xref
        target="I-D.ietf-netconf-trust-anchors"/> and Section 3.2 of <xref
        target="I-D.ietf-netconf-keystore"/>.</t>

        <t>The following configuration example uses local-definitions for the
          server identity and client authentication:
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-server-local.xml)
]]></artwork>
          </figure>
        </t>

        <t>The following configuration example uses keystore-references for the
          server identity and truststore-references for client authentication:
          from the keystore:
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-server-keystore.xml)
]]></artwork>
          </figure>
        </t>
      </section>

      <section anchor="server-yang-module" title="YANG Module">
        <t>This YANG module has normative references to <xref
        target="I-D.ietf-netconf-trust-anchors"/> and <xref
        target="I-D.ietf-netconf-keystore"/> and informative references to
        <xref target="RFC4253"/> and <xref target="RFC7317"/>.</t>

        <t>
          <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-ssh-server@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-ssh-server@YYYY-MM-DD.yang)
]]></artwork>
            <postamble>&lt;CODE ENDS&gt;</postamble>
          </figure>
        </t>
      </section>
    </section>

    <section title="Security Considerations">
      <section title='The "iana-ssh-key-exchange-algs" Module'>
        <t>The "iana-ssh-key-exchange-algs" YANG module defines a data model
          that is designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>
        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>
        <t>This YANG module defines YANG identities, for a public IANA-maintained
          registry, and a single protocol-accessible read-only node for the subset
          of those identities supported by a server.</t>
        <t>YANG identities are not security-sensitive, as they are statically
          defined in the publicly-accessible YANG module.</t>
        <t>The protocol-accessible read-only node for the algorithms supported
          by a server is mildly sensitive, but not to the extent that special
          NACM annotations are needed to prevent read-access to regular
          authenticated administrators.</t>
        <t>This module does not define any writable-nodes, RPCs, actions,
          or notifications, and thus the security consideration for such
          is not provided here.</t>
      </section>

      <section title='The "iana-ssh-encryption-algs" Module'>
        <t>The "iana-ssh-encryption-algs" YANG module defines a data model
          that is designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>
        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>
        <t>This YANG module defines YANG identities, for a public IANA-maintained
          registry, and a single protocol-accessible read-only node for the subset
          of those identities supported by a server.</t>
        <t>YANG identities are not security-sensitive, as they are statically
          defined in the publicly-accessible YANG module.</t>
        <t>The protocol-accessible read-only node for the algorithms supported
          by a server is mildly sensitive, but not to the extent that special
          NACM annotations are needed to prevent read-access to regular
          authenticated administrators.</t>
        <t>This module does not define any writable-nodes, RPCs, actions,
          or notifications, and thus the security consideration for such
          is not provided here.</t>
      </section>

      <section title='The "iana-ssh-mac-algs" Module'>
        <t>The "iana-ssh-mac-algs" YANG module defines a data model
          that is designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>
        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>
        <t>This YANG module defines YANG identities, for a public IANA-maintained
          registry, and a single protocol-accessible read-only node for the subset
          of those identities supported by a server.</t>
        <t>YANG identities are not security-sensitive, as they are statically
          defined in the publicly-accessible YANG module.</t>
        <t>The protocol-accessible read-only node for the algorithms supported
          by a server is mildly sensitive, but not to the extent that special
          NACM annotations are needed to prevent read-access to regular
          authenticated administrators.</t>
        <t>This module does not define any writable-nodes, RPCs, actions,
          or notifications, and thus the security consideration for such
          is not provided here.</t>
      </section>

      <section title='The "iana-ssh-public-key-algs" Module'>
        <t>The "iana-ssh-public-key-algs" YANG module defines a data model
          that is designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>
        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>
        <t>This YANG module defines YANG identities, for a public IANA-maintained
          registry, and a single protocol-accessible read-only node for the subset
          of those identities supported by a server.</t>
        <t>YANG identities are not security-sensitive, as they are statically
          defined in the publicly-accessible YANG module.</t>
        <t>The protocol-accessible read-only node for the algorithms supported
          by a server is mildly sensitive, but not to the extent that special
          NACM annotations are needed to prevent read-access to regular
          authenticated administrators.</t>
        <t>This module does not define any writable-nodes, RPCs, actions,
          or notifications, and thus the security consideration for such
          is not provided here.</t>
      </section>

      <section title='The "ietf-ssh-common" YANG Module'>
        <t>The "ietf-ssh-common" YANG module defines "grouping" statements
          that are designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>

        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>

        <t>Since this module only define groupings,
          these considerations are primarily for the designers of other
          modules that use these groupings.</t>

        <t>None of the readable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-all" extension has not been set for
          any data nodes defined in this module.</t>

        <t>None of the writable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-write" extension has not been set for
          any data nodes defined in this module.</t>

        <t>This module does not define any RPCs, actions, or notifications,
          and thus the security consideration for such is not provided here.</t>
      </section>

      <section title='The "ietf-ssh-client" YANG Module'>
        <t>The "ietf-ssh-client" YANG module defines "grouping" statements
          that are designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>

        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>

        <t>Since this module only define groupings,
          these considerations are primarily for the designers of other
          modules that use these groupings.</t>

        <t>One readable data node defined in this YANG module may be considered
          sensitive or vulnerable in some network environments. This
          node is as follows:
          <list style="symbols">
            <t>The "client-identity/password" node:
              <ul empty="true">
                <li>The cleartext "password" node defined in the "ssh-client-grouping"
                  grouping is additionally sensitive to read operations such that,
                  in normal use cases, it should never be returned to a client.
                  For this reason, the NACM extension "default-deny-all" has been
                  applied to it.</li>
              </ul>
            </t>
          </list>
        </t>
        <aside>
          <t>Please be aware that this module uses the "key" and "private-key"
            nodes from the "ietf-crypto-types" module <xref target="I-D.ietf-netconf-crypto-types"/>,
            where said nodes have the NACM extension "default-deny-all" set, thus
            preventing unrestricted read-access to the cleartext key values.</t>
        </aside>

        <t>All the writable data nodes defined by this module may be
          considered sensitive or vulnerable in some network environments.
          For instance, any modification to a key or reference to a key
          may dramatically alter the implemented security policy.  For
          this reason, the NACM extension "default-deny-write" has been
          set for all data nodes defined in this module.</t>

        <t>This module does not define any RPCs, actions, or notifications,
          and thus the security consideration for such is not provided here.</t>
      </section>

      <section title='The "ietf-ssh-server" YANG Module'>
        <t>The "ietf-ssh-server" YANG module defines "grouping" statements
          that are designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>

        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>

        <t>Since this module only define groupings,
          these considerations are primarily for the designers of other
          modules that use these groupings.</t>

        <t>None of the readable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-all" extension has not been set for
          any data nodes defined in this module.</t>
        <aside>
          <t>Please be aware that this module uses the "key" and "private-key"
            nodes from the "ietf-crypto-types" module <xref target="I-D.ietf-netconf-crypto-types"/>,
            where said nodes have the NACM extension "default-deny-all" set, thus
            preventing unrestricted read-access to the cleartext key values.</t>
        </aside>

        <t>All the writable data nodes defined by this module may be
          considered sensitive or vulnerable in some network environments.
          For instance, the addition or removal of references to keys,
          certificates, trusted anchors, etc., or even the modification
          of transport or keepalive parameters can dramatically alter
          the implemented security policy.  For this reason, the NACM
          extension "default-deny-write" has been set for all data nodes
          defined in this module.</t>

        <t>This module does not define any RPCs, actions, or notifications,
          and thus the security consideration for such is not provided here.</t>
      </section>
    </section>

    <section title="IANA Considerations">

      <section title='The "IETF XML" Registry'>
        <t>This document registers seven URIs in the "ns" subregistry of the
        IETF XML Registry <xref target="RFC3688"/>. Following the format in
        <xref target="RFC3688"/>, the following registrations are
        requested:</t>

        <t><figure>
            <artwork>
URI: urn:ietf:params:xml:ns:yang:iana-ssh-key-exchange-algs
Registrant Contact: IANA
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:iana-ssh-encryption-algs
Registrant Contact: IANA
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:iana-ssh-mac-algs
Registrant Contact: IANA
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:iana-ssh-public-key-algs
Registrant Contact: IANA
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:ietf-ssh-common
Registrant Contact: The IESG
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:ietf-ssh-client
Registrant Contact: The IESG
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:ietf-ssh-server
Registrant Contact: The IESG
XML: N/A, the requested URI is an XML namespace.
</artwork>
          </figure></t>
      </section>

      <section title='The "YANG Module Names" Registry'>
        <t>This document registers seven YANG modules in the YANG Module Names
        registry <xref target="RFC6020"/>. Following the format in <xref
        target="RFC6020"/>, the following registrations are requested:</t>

        <t><figure>
            <artwork>
name:         iana-ssh-key-exchange-algs
namespace:    urn:ietf:params:xml:ns:yang:iana-ssh-key-exchange-algs
prefix:       sshkea
reference:    RFC EEEE

name:         iana-ssh-encryption-algs
namespace:    urn:ietf:params:xml:ns:yang:iana-ssh-encryption-algs
prefix:       sshea
reference:    RFC EEEE

name:         iana-ssh-mac-algs
namespace:    urn:ietf:params:xml:ns:yang:iana-ssh-mac-algs
prefix:       sshma
reference:    RFC EEEE

name:         iana-ssh-public-key-algs
namespace:    urn:ietf:params:xml:ns:yang:iana-ssh-public-key-algs
prefix:       sshpka
reference:    RFC EEEE

name:         ietf-ssh-common
namespace:    urn:ietf:params:xml:ns:yang:ietf-ssh-common
prefix:       sshcmn
reference:    RFC EEEE

name:         ietf-ssh-client
namespace:    urn:ietf:params:xml:ns:yang:ietf-ssh-client
prefix:       sshc
reference:    RFC EEEE

name:         ietf-ssh-server
namespace:    urn:ietf:params:xml:ns:yang:ietf-ssh-server
prefix:       sshs
reference:    RFC EEEE
</artwork>
          </figure></t>
      </section>

      <section title='The "iana-ssh-encryption-algs" Module'>
        <t>IANA is requested to maintain a YANG module called "iana-ssh-encryption-algs"
          that shadows the "Encryption Algorithm Names" sub-registry of the
          "Secure Shell (SSH) Protocol Parameters" registry <xref target="IANA-ENC-ALGS"/>.</t>
        <t>This registry defines a YANG identity for each encryption algorithm, and a "base"
          identity from which all of the other identities are derived.</t>
        <t>An initial version of this module can be found in <xref target="iana-ssh-ea-module"/></t>
        <ul>
          <li>Please note that this module was created on June 1st, 2021, and that additional
            entries may have been added in the interim before this document's publication.
            If this is that case, IANA may either publish just an updated module containing
            the new entries, or publish the initial module as is immediately followed by a
            "revision" containing the additional algorithm names.</li>
        </ul>
      </section>

      <section title='The "iana-ssh-mac-algs" Module'>
        <t>IANA is requested to maintain a YANG module called "iana-ssh-mac-algs"
          that shadows the "MAC Algorithm Names" sub-registry of the
          "Secure Shell (SSH) Protocol Parameters" registry <xref target="IANA-MAC-ALGS"/>.</t>
        <t>This registry defines a YANG identity for each MAC algorithm, and a "base"
          identity from which all of the other identities are derived.</t>
        <t>An initial version of this module can be found in <xref target="iana-ssh-ma-module"/>.</t>
        <ul>
          <li>Please note that this module was created on June 1st, 2021, and that additional
            entries may have been added in the interim before this document's publication.
            If this is that case, IANA may either publish just an updated module containing
            the new entries, or publish the initial module as is immediately followed by a
            "revision" containing the additional algorithm names.</li>
        </ul>
      </section>

      <section title='The "iana-ssh-public-key-algs" Module'>
        <t>IANA is requested to maintain a YANG module called "iana-ssh-public-key-algs"
          that shadows the "Public Key Algorithm Names" sub-registry of the
          "Secure Shell (SSH) Protocol Parameters" registry <xref target="IANA-PUBKEY-ALGS"/>.</t>
        <t>This registry defines a YANG identity for each public key algorithm, and a "base"
          identity from which all of the other identities are derived.</t>
        <t>Registry entries for which the '*All values beginning with the specified string
          and not containing "@".' note applies MUST be expanded so that there is a distinct
          YANG identity for each enumeration.</t>
        <t>An initial version of this module can be found in <xref target="iana-ssh-pka-module"/>.</t>
        <ul>
          <li>Please note that this module was created on June 1st, 2021, and that additional
            entries may have been added in the interim before this document's publication.
            If this is that case, IANA may either publish just an updated module containing
            the new entries, or publish the initial module as is immediately followed by a
            "revision" containing the additional algorithm names.</li>
        </ul>
      </section>

      <section title='The "iana-ssh-key-exchange-algs" Module'>
        <t>IANA is requested to maintain a YANG module called "iana-ssh-key-exchange-algs"
          that shadows the "Key Exchange Method Names" sub-registry of the
          "Secure Shell (SSH) Protocol Parameters" registry <xref target="IANA-KEYEX-ALGS"/>.</t>
        <t>This registry defines a YANG identity for each key exchange algortihm, and a "base"
          identity from which all of the other identities are derived.</t>
        <t>Registry entries for which the '*All values beginning with the specified string
          and not containing "@".' note applies MUST be expanded so that there is a distinct
          YANG identity for each enumeration.</t>
        <t>An initial version of this module can be found in <xref target="iana-ssh-kea-module"/>.</t>
        <ul>
          <li>Please note that this module was created on June 1st, 2021, and that additional
            entries may have been added in the interim before this document's publication.
            If this is that case, IANA may either publish just an updated module containing
            the new entries, or publish the initial module as is immediately followed by a
            "revision" containing the additional algorithm names.</li>
          <li>Please also note that the "status" statement has been set to "deprecated"
            <eref target="https://datatracker.ietf.org/doc/html/rfc8732#section-6"/>.  It is
            recommended that IANA adds a column to the registry to more easily track the
            deprecation status of algorithms.</li>
        </ul>
      </section>

    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119.xml"?>
      <?rfc include="reference.RFC.4344.xml"?>
      <?rfc include="reference.RFC.4419.xml"?>
      <?rfc include="reference.RFC.5656.xml"?>
      <?rfc include="reference.RFC.6020.xml"?>
      <?rfc include="reference.RFC.6187.xml"?>
      <?rfc include="reference.RFC.6668.xml"?>
      <?rfc include="reference.RFC.7950.xml"?>
      <?rfc include="reference.RFC.8174.xml"?>
      <?rfc include="reference.RFC.8341.xml"?>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-crypto-types.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-trust-anchors.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-keystore.xml"/>
    </references>

    <references title="Informative References">
      <!--<reference anchor='FIPS180-4' target="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">
          <front>
            <title>Secure Hash Standard (SHS)</title>
            <author fullname='National Institute of Standards and Technology'/>
            <date year='2012' month='March'/>
          </front>
          <seriesInfo name="FIPS PUB" value="180-4"/>
        </reference>-->
      <?rfc include="reference.RFC.3688.xml"?>
      <?rfc include="reference.RFC.4252.xml"?>
      <?rfc include="reference.RFC.4253.xml"?>
      <?rfc include="reference.RFC.4254.xml"?>
      <?rfc include="reference.RFC.6241.xml"?>
      <?rfc include="reference.RFC.6242.xml"?>
      <?rfc include="reference.RFC.7317.xml"?>
      <?rfc include="reference.RFC.8040.xml"?>
      <?rfc include="reference.RFC.8071.xml"?>
      <?rfc include="reference.RFC.8340.xml"?>
      <?rfc include="reference.RFC.8342.xml"?>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tcp-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-ssh-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tls-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-http-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-netconf-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-restconf-client-server.xml"/>
      <reference anchor="OPENSSH" target="http://www.openssh.com">
        <front>
          <title>OpenSSH</title>
          <author fullname="The OpenBSD Project"/>
        </front>
      </reference>

      <reference anchor="IANA-KEYEX-ALGS" target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-16">
        <front>
          <title>IANA "Key Exchange Method Names" Sub-registry of the "Secure Shell (SSH) Protocol Parameters" Registry</title>
          <author fullname="Internet Assigned Numbers Authority (IANA)"/>
        </front>
      </reference>
      <reference anchor="IANA-ENC-ALGS" target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-17">
        <front>
          <title>IANA "Encryption Algorithm Names" Sub-registry of the "Secure Shell (SSH) Protocol Parameters" Registry</title>
          <author fullname="Internet Assigned Numbers Authority (IANA)"/>
        </front>
      </reference>
      <reference anchor="IANA-MAC-ALGS" target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-18">
        <front>
          <title>IANA "MAC Algorithm Names" Sub-registry of the "Secure Shell (SSH) Protocol Parameters" Registry</title>
          <author fullname="Internet Assigned Numbers Authority (IANA)"/>
        </front>
      </reference>
      <reference anchor="IANA-PUBKEY-ALGS" target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-19">
        <front>
          <title>IANA "Public Key Algorithm Names" Sub-registry of the "Secure Shell (SSH) Protocol Parameters" Registry</title>
          <author fullname="Internet Assigned Numbers Authority (IANA)"/>
        </front>
      </reference>

    </references>

    <section title='YANG Modules for IANA'>
      <t>The modules contained in this section were generated by scripts using the contents of the
        associated sub-registry as they existed on June 1st, 2021.</t>

      <section title='Initial Module for the "Encryption Algorithm Names" Registry' anchor="iana-ssh-ea-module">
        <section title="Data Model Overview">
          <t>This section provides an overview of the "iana-ssh-encryption-algs" module
            in terms of its identities and protocol-accessible nodes.</t>
          <section title="Identities" toc="exclude">
            <t>The following diagram lists the base "identity" statements defined in the
              module, of which there is just one, and illustrates that all the derived identity
              statements are generated from the associated IANA-maintained registry
              <xref target="IANA-ENC-ALGS"/>.</t>
            <t>
              <figure>
                <artwork><![CDATA[
Identities:
  +-- encryption-alg-base
    +-- <identity-name from IANA registry>
]]></artwork>
              </figure>
            </t>
            <aside>
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            </aside>
          </section>
          <section title="Protocol-accessible Nodes" toc="exclude">
            <t>The following tree diagram <xref target="RFC8340"/> lists all the
              protocol-accessible nodes defined in the "iana-ssh-encryption-alg"
              module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/iana-ssh-encryption-algs-tree.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>Protocol-accessible nodes are those nodes that are accessible
                when the module is "implemented", as described in <relref
                section="5.6.5" target="RFC7950"/>.</li>
            </ul>
          </section>
        </section>
        <section title="Example Usage">
          <t>The following example illustrates operational state data indicating
            the SSH encryption algorithms supported by the server:
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-encryption-algs.xml)
]]></artwork>
            </figure>
          </t>
        </section>
        <section title="YANG Module">
          <t>Following are the complete contents to the initial IANA-maintained YANG module.
            Please note that the date "2021-06-01" reflects the day on which the extraction
            occurred.</t>
          <t>
            <figure>
              <preamble>&lt;CODE BEGINS&gt; file "iana-ssh-encryption-algs@2021-06-01.yang"</preamble>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(iana-ssh-encryption-algs@2021-06-01.yang)
]]></artwork>
              <postamble>&lt;CODE ENDS&gt;</postamble>
            </figure>
          </t>
        </section>
      </section>

      <section title='Initial Module for the "MAC Algorithm Names" Registry' anchor="iana-ssh-ma-module">
        <section title="Data Model Overview">
          <t>This section provides an overview of the "iana-ssh-mac-algs" module
            in terms of its identities and protocol-accessible nodes.</t>
          <section title="Identities" toc="exclude">
            <t>The following diagram lists the base "identity" statements defined in the
              module, of which there is just one, and illustrates that all the derived identity
              statements are generated from the associated IANA-maintained registry
              <xref target="IANA-MAC-ALGS"/>.</t>
            <t>
              <figure>
                <artwork><![CDATA[
Identities:
  +-- mac-alg-base
    +-- <identity-name from IANA registry>
]]></artwork>
              </figure>
            </t>
            <aside>
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            </aside>
          </section>
          <section title="Protocol-accessible Nodes" toc="exclude">
            <t>The following tree diagram <xref target="RFC8340"/> lists all the
              protocol-accessible nodes defined in the "iana-ssh-mac-alg"
              module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/iana-ssh-mac-algs-tree.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>Protocol-accessible nodes are those nodes that are accessible
                when the module is "implemented", as described in <relref
                section="5.6.5" target="RFC7950"/>.</li>
            </ul>
          </section>
        </section>
        <section title="Example Usage">
          <t>The following example illustrates operational state data indicating
            the SSH MAC algorithms supported by the server:
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-mac-algs.xml)
]]></artwork>
            </figure>
          </t>
        </section>
        <section title="YANG Module">
          <t>Following are the complete contents to the initial IANA-maintained YANG module.
            Please note that the date "2021-06-01" reflects the day on which the extraction
            occurred.</t>
          <t>
            <figure>
              <preamble>&lt;CODE BEGINS&gt; file "iana-ssh-mac-algs@2021-06-01.yang"</preamble>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(iana-ssh-mac-algs@2021-06-01.yang)
]]></artwork>
              <postamble>&lt;CODE ENDS&gt;</postamble>
            </figure>
          </t>
        </section>
      </section>

      <section title='Initial Module for the "Public Key Algorithm Names" Registry' anchor="iana-ssh-pka-module">
        <section title="Data Model Overview">
          <t>This section provides an overview of the "iana-ssh-public-key-algs" module
            in terms of its identities and protocol-accessible nodes.</t>
          <section title="Identities" toc="exclude">
            <t>The following diagram lists the base "identity" statements defined in the
              module, of which there is just one, and illustrates that all the derived identity
              statements are generated from the associated IANA-maintained registry
              <xref target="IANA-PUBKEY-ALGS"/>.</t>
            <t>
              <figure>
                <artwork><![CDATA[
Identities:
  +-- public-key-alg-base
    +-- <identity-name from IANA registry>
]]></artwork>
              </figure>
            </t>
            <aside>
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            </aside>
          </section>
          <section title="Protocol-accessible Nodes" toc="exclude">
            <t>The following tree diagram <xref target="RFC8340"/> lists all the
              protocol-accessible nodes defined in the "iana-ssh-public-key-alg"
              module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/iana-ssh-public-key-algs-tree.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>Protocol-accessible nodes are those nodes that are accessible
                when the module is "implemented", as described in <relref
                section="5.6.5" target="RFC7950"/>.</li>
            </ul>
          </section>
        </section>
        <section title="Example Usage">
          <t>The following example illustrates operational state data indicating
            the SSH public key algorithms supported by the server:
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-public-key-algs.xml)
]]></artwork>
            </figure>
          </t>
        </section>
        <section title="YANG Module">
          <t>Following are the complete contents to the initial IANA-maintained YANG module.
            Please note that the date "2021-06-01" reflects the day on which the extraction
            occurred.</t>
          <t>
            <figure>
              <preamble>&lt;CODE BEGINS&gt; file "iana-ssh-public-key-algs@2021-06-01.yang"</preamble>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(iana-ssh-public-key-algs@2021-06-01.yang)
]]></artwork>
              <postamble>&lt;CODE ENDS&gt;</postamble>
            </figure>
          </t>
        </section>
      </section>

      <section title='Initial Module for the "Key Exchange Method Names" Registry' anchor="iana-ssh-kea-module">
        <section title="Data Model Overview">
          <t>This section provides an overview of the "iana-ssh-key-exchange-algs" module
            in terms of its identities and protocol-accessible nodes.</t>
          <section title="Identities" toc="exclude">
            <t>The following diagram lists the base "identity" statements defined in the
              module, of which there is just one, and illustrates that all the derived identity
              statements are generated from the associated IANA-maintained registry
              <xref target="IANA-KEYEX-ALGS"/>.</t>
            <t>
              <figure>
                <artwork><![CDATA[
Identities:
  +-- key-exchange-alg-base
    +-- <identity-name from IANA registry>
]]></artwork>
              </figure>
            </t>
            <aside>
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            </aside>
          </section>
          <section title="Protocol-accessible Nodes" toc="exclude">
            <t>The following tree diagram <xref target="RFC8340"/> lists all the
              protocol-accessible nodes defined in the "iana-ssh-key-exchange-alg"
              module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/iana-ssh-key-exchange-algs-tree.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>Protocol-accessible nodes are those nodes that are accessible
                when the module is "implemented", as described in <relref
                section="5.6.5" target="RFC7950"/>.</li>
            </ul>
          </section>
        </section>
        <section title="Example Usage">
          <t>The following example illustrates operational state data indicating
            the SSH key exchange algorithms supported by the server:
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-key-exchange-algs.xml)
]]></artwork>
            </figure>
          </t>
        </section>
        <section title="YANG Module">
          <t>Following are the complete contents to the initial IANA-maintained YANG module.
            Please note that the date "2021-06-01" reflects the day on which the extraction
            occurred.</t>
          <t>
            <figure>
              <preamble>&lt;CODE BEGINS&gt; file "iana-ssh-key-exchange-algs@2021-06-01.yang"</preamble>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(iana-ssh-key-exchange-algs@2021-06-01.yang)
]]></artwork>
              <postamble>&lt;CODE ENDS&gt;</postamble>
            </figure>
          </t>
        </section>
      </section>
    </section>

    <section title="Change Log" removeInRFC="true" anchor="change-log">
      <section title="00 to 01">
        <t>
          <list style="symbols">
            <t>Noted that '0.0.0.0' and '::' might have special meanings.</t>
            <t>Renamed "keychain" to "keystore".</t>
          </list>
        </t>
      </section>
      <section title="01 to 02">
        <t>
          <list style="symbols">
            <t>Removed the groupings 'listening-ssh-client-grouping' and
            'listening-ssh-server-grouping'. Now modules only contain the
            transport-independent groupings.</t>
            <t>Simplified the "client-auth" part in the ietf-ssh-client
            module. It now inlines what it used to point to keystore for.</t>
            <t>Added cipher suites for various algorithms into new
            'ietf-ssh-common' module.</t>
          </list>
        </t>
      </section>
      <section title="02 to 03">
        <t>
          <list style="symbols">
            <t>Removed 'RESTRICTED' enum from 'password' leaf type.</t>
            <t>Added a 'must' statement to container 'server-auth' asserting
            that at least one of the various auth mechanisms must be
            specified.</t>
            <t>Fixed description statement for leaf 'trusted-ca-certs'.</t>
          </list>
        </t>
      </section>
      <section title="03 to 04">
        <t>
          <list style="symbols">
            <t>Change title to "YANG Groupings for SSH Clients and SSH
            Servers"</t>
            <t>Added reference to RFC 6668</t>
            <t>Added RFC 8174 to Requirements Language Section.</t>
            <t>Enhanced description statement for ietf-ssh-server's
            "trusted-ca-certs" leaf.</t>
            <t>Added mandatory true to ietf-ssh-client's "client-auth"
            'choice' statement.</t>
            <t>Changed the YANG prefix for module ietf-ssh-common from
            'sshcom' to 'sshcmn'.</t>
            <t>Removed the compression algorithms as they are not commonly
            configurable in vendors' implementations.</t>
            <t>Updating descriptions in transport-params-grouping and the
            servers's usage of it.</t>
            <t>Now tree diagrams reference ietf-netmod-yang-tree-diagrams</t>
            <t>Updated YANG to use typedefs around leafrefs to common keystore
            paths</t>
            <t>Now inlines key and certificates (no longer a leafref to
            keystore)</t>
          </list>
        </t>
      </section>
      <section title="04 to 05">
        <t>
          <list style="symbols">
            <t>Merged changes from co-author.</t>
          </list>
        </t>
      </section>
      <section title="05 to 06">
        <t>
          <list style="symbols">
            <t>Updated to use trust anchors from trust-anchors draft (was
            keystore draft)</t>
            <t>Now uses new keystore grouping enabling asymmetric key to be
            either locally defined or a reference to the keystore.</t>
          </list>
        </t>
      </section>
      <section title="06 to 07">
        <t>
          <list style="symbols">
            <t>factored the ssh-[client|server]-groupings into more reusable
            groupings.</t>
            <t>added if-feature statements for the new "ssh-host-keys" and
            "x509-certificates" features defined in
            draft-ietf-netconf-trust-anchors.</t>
          </list>
        </t>
      </section>
      <section title="07 to 08">
        <t>
          <list style="symbols">
            <t>Added a number of compatibility matrices to Section 5 (thanks Frank!)</t>
            <t>Clarified that any configured "host-key-alg" values need to be
               compatible with the configured private key.</t>
          </list>
        </t>
      </section>
      <section title="08 to 09">
        <t>
          <list style="symbols">
            <t>Updated examples to reflect update to groupings defined in the keystore -09 draft.</t>
            <t>Add SSH keepalives features and groupings.</t>
            <t>Prefixed top-level SSH grouping nodes with 'ssh-' and support mashups.</t>
            <t>Updated copyright date, boilerplate template, affiliation, and folding algorithm.</t>
          </list>
        </t>
      </section>
      <section title="09 to 10">
        <t>
          <list style="symbols">
            <t>Reformatted the YANG modules.</t>
          </list>
        </t>
      </section>
      <section title="10 to 11">
        <t>
          <list style="symbols">
            <t>Reformatted lines causing folding to occur.</t>
          </list>
        </t>
      </section>
      <section title="11 to 12">
        <t>
          <list style="symbols">
            <t>Collapsed all the inner groupings into the top-level grouping.</t>
            <t>Added a top-level "demux container" inside the top-level grouping.</t>
            <t>Added NACM statements and updated the Security Considerations section.</t>
            <t>Added "presence" statements on the "keepalive" containers, as was
              needed to address a validation error that appeared after adding the
              "must" statements into the NETCONF/RESTCONF client/server modules.</t>
            <t>Updated the boilerplate text in module-level "description" statement
              to match copyeditor convention.</t>
          </list>
        </t>
      </section>
      <section title="12 to 13">
        <t>
          <list style="symbols">
            <t>Removed the "demux containers", floating the
              nacm:default-deny-write to each descendant node, and
              adding a note to model designers regarding the potential
              need to add their own demux containers.</t>
            <t>Fixed a couple references (section 2 --> section 3)</t>
            <t>In the server model, replaced &lt;client-cert-auth&gt;
              with &lt;client-authentication&gt; and introduced
              'local-or-external' choice.</t>
          </list>
        </t>
      </section>
      <section title="13 to 14">
        <t>
          <list style="symbols">
            <t>Updated to reflect changes in trust-anchors drafts
              (e.g., s/trust-anchors/truststore/g + s/pinned.//)</t>
          </list>
        </t>
      </section>
      <section title="14 to 15">
        <t>
          <list style="symbols">
            <t>Updated examples to reflect ietf-crypto-types change
              (e.g., identities --&gt; enumerations)</t>
            <t>Updated "server-authentication" and "client-authentication" nodes from
              being a leaf of type "ts:host-keys-ref" or "ts:certificates-ref" to a
              container that uses "ts:local-or-truststore-host-keys-grouping" or
              "ts:local-or-truststore-certs-grouping".</t>
          </list>
        </t>
      </section>
      <section title="15 to 16">
        <t>
          <list style="symbols">
            <t>Removed unnecessary if-feature statements in the -client and -server modules.</t>
            <t>Cleaned up some description statements in the -client and -server modules.</t>
            <t>Fixed a canonical ordering issue in ietf-ssh-common detected by new pyang.</t>
          </list>
        </t>
      </section>
      <section title="16 to 17">
        <t>
          <list style="symbols">
            <t>Removed choice local-or-external by removing the 'external' case and flattening
              the 'local' case and adding a "local-users-supported" feature.</t>
            <t>Updated examples to include the "*-key-format" nodes.</t>
            <t>Augmented-in "must" expressions ensuring that locally-defined public-key-format
              are "ct:ssh-public-key-format" (must expr for ref'ed keys are TBD).</t>
          </list>
        </t>
      </section>
      <section title="17 to 18">
        <t>
          <list style="symbols">
            <t>Removed leaf-list 'other' from ietf-ssh-server.</t>
            <t>Removed unused 'external-client-auth-supported' feature.</t>
            <t>Added features client-auth-password, client-auth-hostbased, and client-auth-none.</t>
            <t>Renamed 'host-key' to 'public-key' for when refering to 'publickey' based auth.</t>
            <t>Added new feature-protected 'hostbased' and 'none' to the 'user' node's config.</t>
            <t>Added new feature-protected 'hostbased' and 'none' to the 'client-identity' node's config.</t>
            <t>Updated examples to reflect new "bag" addition to truststore.</t>
            <t>Refined truststore/keystore groupings to ensure the key formats "must" be particular values.</t>
            <t>Switched to using truststore's new "public-key" bag (instead of separate "ssh-public-key"
              and "raw-public-key" bags.</t>
            <t>Updated client/server examples to cover ALL cases (local/ref x cert/raw-key/psk).</t>
          </list>
        </t>
      </section>
      <section title="18 to 19">
        <t>
          <list style="symbols">
            <t>Updated the "keepalives" containers to address Michal Vaško's request to
              align with RFC 8071.</t>
            <t>Removed algorithm-mapping tables from the "SSH Common Model" section</t>
            <t>Removed 'algorithm' node from examples.</t>
            <t>Added feature "userauth-publickey"</t>
            <t>Removed "choice auth-type", as auth-types are not exclusive.</t>
            <t>Renamed both "client-certs" and "server-certs" to "ee-certs"</t>
            <t>Switch "must" to assert the public-key-format is "subject-public-key-info-format" when certificates are used.</t>
            <t>Added a "Note to Reviewers" note to first page.</t>
          </list>
        </t>
      </section>
      <section title="19 to 20">
        <t>
          <list style="symbols">
            <t>Added a "must 'public-key or password or hostbased or none or certificate'"
              statement to the "user" node in ietf-ssh-client</t>
            <t>Expanded "Data Model Overview section(s) [remove "wall" of tree diagrams].</t>
            <t>Moved the "ietf-ssh-common" module section to proceed the other two module sections.</t>
            <t>Updated the Security Considerations section.</t>
          </list>
        </t>
      </section>
      <section title="20 to 21">
        <t>
          <list style="symbols">
            <t>Updated examples to reflect new "cleartext-" prefix in the crypto-types draft.</t>
          </list>
        </t>
      </section>
      <section title="21 to 22">
        <t>
          <list style="symbols">
            <t>Cleaned up the SSH-client examples (i.e., removing FIXMEs)</t>
            <t>Fixed issues found by the SecDir review of the "keystore" draft.</t>
            <t>Updated the "ietf-ssh-client" module to use the new "password-grouping"
              grouping from the "crypto-types" module.</t>
          </list>
        </t>
      </section>
      <section title="22 to 23">
        <t>
          <list style="symbols">
            <t>Addressed comments raised by YANG Doctor in the ct/ts/ks drafts.</t>
          </list>
        </t>
      </section>
      <section title="23 to 24">
        <t>
          <list style="symbols">
            <t>Removed the 'supported-authentication-methods' from {grouping ssh-server-grouping}/client-authentication.</t>
            <t>Added XML-comment above examples explaining the reason for the unexepected top-most element's presence.</t>
            <t>Added RFC-references to various 'feature' statements.</t>
            <t>Renamed "credentials" to "authentication methods"</t>
            <t>Renamed "client-auth-*" to "userauth-*"</t>
            <t>Renamed "client-identity-*" to "userauth-*"</t>
            <t>Fixed nits found by YANG Doctor reviews.</t>
            <t>Aligned modules with `pyang -f` formatting.</t>
            <t>Added a 'Contributors' section.</t>
          </list>
        </t>
      </section>
      <section title="24 to 25">
        <t>
          <list style="symbols">
            <t>Moved algorithms in ietf-ssh-common (plus more) to IANA-maintained modules</t>
            <t>Added "config false" lists for algorithms supported by the server.</t>
            <t>Renamed "{ietf-ssh-client}userauth-*" to "client-ident-*"</t>
            <t>Renamed "{ietf-ssh-server}userauth-*" to "local-user-auth-*"</t>
            <t>Fixed issues found during YANG Doctor review.</t>
            <t>Fixed issues found during Secdir review.</t>
          </list>
        </t>
      </section>
      <section title="25 to 26">
        <t>
          <list style="symbols">
            <t>Replaced "base64encodedvalue==" with "BASE64VALUE=" in examples.</t>
            <t>Minor editorial nits</t>
          </list>
        </t>
      </section>
      <!--
      <section title="26 to 27">
        <t>
          <list style="symbols">
            <t>SUBMISSION PENDING</t>
          </list>
        </t>
      </section>
      -->
    </section>

    <section title="Acknowledgements" numbered="no">
      <t>The authors would like to thank for following for lively discussions
        on list and in the halls (ordered by first name):
        Alan Luchuk,
        Andy Bierman,
        Balázs Kovács,
        Barry Leiba,
        Benoit Claise,
        Bert Wijnen,
        David Lamparter,
        Gary Wu,
        Juergen Schoenwaelder,
        Ladislav Lhotka,
        Liang Xia,
        Martin Björklund,
        Mehmet Ersue,
        Michal Vaško,
        Phil Shafer,
        Radek Krejci,
        Sean Turner,
        Tom Petch.</t>
    </section>

    <section title="Contributors" numbered="no">
      <t>Special acknowledgement goes to Gary Wu for his work on the
        "ietf-ssh-common" module.</t>
    </section>
  </back>
</rfc>
